version: 2

jobs:
  build_and_test:
    docker:
      - image: openjdk:8-jdk
    steps:
      - run:
          name: Install sbt
          command: |
            apt-get update && \
              apt-get install apt-transport-https bc ca-certificates software-properties-common -y

            echo "deb https://dl.bintray.com/sbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list && \
              apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 && \
              apt-get update && \
              apt-get install sbt -y
      - checkout
      - restore_cache:
          keys:
            - sbt-cache-{{ checksum "project/Dependencies.scala" }}-{{ checksum "project/plugins.sbt" }}-{{ checksum "project/build.properties" }}
      - run:
          name: Compile root project
          command: sbt compile
      - run:
          name: Execute root project unit test suite
          command: sbt test
      - run:
          name: Compile playServer project
          command: sbt "playServer/compile"
      - run:
          name: Execute playServer project unit test suite
          command: sbt "playServer/test"
      - run:
          name: Build root project fat jar
          command: sbt assembly
      - persist_to_workspace:
          root: target
          paths:
            - scala-2.12/serverless-url-shortener.jar
      - save_cache:
          paths:
            - ~/.ivy2
            - ~/.sbt
          key: sbt-cache-{{ checksum "project/Dependencies.scala" }}-{{ checksum "project/plugins.sbt" }}-{{ checksum "project/build.properties" }}

  create_aws_resources:
    docker:
      - image: ubuntu
    steps:
      - run:
          name: Install terraform
          command: |
            apt update && apt install curl unzip -y

            curl -o terraform.zip https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip && \
            unzip terraform.zip && rm terraform.zip && chmod +x terraform && \
            mv -f $PWD/terraform /usr/local/bin/
      - checkout

  deploy_serverless:
    docker:
      - image: node
    steps:
      - run:
          name: Install Serverless
          command: npm install -g serverless
      - attach_workspace:
          at: resources
      - run:
          name: Check
          command: |
            apt update && apt install tree -y && tree

workflows:
  version: 2
  deploy:
    jobs:
      - build_and_test
      - create_aws_resources:
          requires:
            - build_and_test
      - deploy_serverless:
          requires:
            - create_aws_resources


